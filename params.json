{"name":"Volt","tagline":"A painless web server for PocketMine-MP","body":"![Volt Icon](/resources/smallicon.png) ***Volt***\r\n====\r\n###### Formerly HTTPServer\r\n\r\nVolt is an hyper-powerful integrated website solution for PocketMine. Driven by Handlebars and pthreads, volt is an extensive webserver.\r\n\r\n### What's changing in v3.0.0?\r\n* **Name.** HTTPServer is now volt. Why? I thought carefully about this one and I figured that \"HTTPServer\" did not represent the project correctly.\r\n* **Threading.** Volt is now better at threading. Every request is run by a worker in a pool. This allows multiple requests to be processed in parallel. \r\n* **Templating.** Now Volt is driven by Handlebars for high speeds and extreme customization.\r\n* **API.** The API has been entirely rewritten to be more fun to use. It is much more logical and powerful.\r\n\r\n### Volt API\r\nThe API is still tentative and might undergo some large structural changes before its release, so don't get too attached to it. The API centralizes on `WebsiteData` objects which are magical objects that allow interaction with the server. These objects mimic arrays by implementing `\\ArrayAccess`, `\\Countable`, and `\\IteratorAggregate`.\r\n\r\n#### Getting API access\r\n##### Anonymous\r\nThis mode of access is **not** recommended . It allows direct access to the API without any logging or monitoring.\r\n```php\r\n$data = new \\volt\\api\\WebsiteData();\r\n```\r\n##### Identified \r\nIn an optimal setting you should identify yourself to Volt. This will allow Volt to create logs of your API usage. There are three options for identification\r\n* PluginBase (Recommended)\r\n* Plugin name\r\n* Auto-detect (Not recommended)\r\n\r\n```php\r\n/* Option #1 (Recommended) */\r\n$data = new \\volt\\api\\MonitoredWebsiteData($this); //Called from within a PluginBase\r\n/* Option #2 */\r\n$data = new \\volt\\api\\MonitoredWebsiteData(\"PluginName\"); //Called from anywhere\r\n/* Option #3 (Not recommended) */\r\n$data = new \\volt\\api\\MonitoredWebsiteData(); //Called from within a PluginBase, and requires class name to equal plugin name\r\n```\r\nIf an identification request fails a `volt\\exception\\PluginIdentificationException` will be thrown.\r\n\r\n#### Setting and getting values\r\nOnce you have a `WebsiteData` object, you get a link to the global scope of handlebars variables. It is highly recommended to put all your variables in a namespace for your plugin, this helps avoid collisions.\r\n```php\r\n$data = new \\volt\\WebsiteData(); //We are using anon\r\n$data[\"foo\"] = [\"1\", \"2\", \"3\"];\r\nvar_dump($data[\"foo\"]); //[\"1\", \"2\", \"3\"]\r\n```\r\n\r\n#### Dynamic Page Registration\r\nTo ease plugin installation, pages can be dynamically registered into Volt. This feature is still experimental and may be expanded upon in a future release.\r\n```php\r\n$page = new \\volt\\api\\DynamicPage(\"/hello\");\r\n$page(\"This is the content\"); //Page is now available at /hello and will display \"This is the content\"\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}